/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codewars;

import java.util.*;
import java.util.stream.Collectors;

public class Inspector {

  private static final Set<String> COUNTRY_NAMES = Set.of(
    "Arstotzka", "Antegria", "Impor", "Kolechia", "Obristan", "Republia", "United Federation"
  );

  private final Set<String> allowedCountries = new HashSet<>();
  private final Map<String, Set<String>> vaccineRules = new HashMap<>();
  private final Map<String, Set<String>> documentRules = new HashMap<>();
  private String wantedCriminal;

  public void receiveBulletin(String bulletin) {
    // Reset wanted criminal each day
    wantedCriminal = null;

    List<String> rules = List.of(bulletin.split("/n"));
    processRules(rules);
  }

  private void processRules(List<String> rulesList) {
    for (String rule: rulesList) {
      if (rule.startsWith("Allow") || rule.startsWith("Deny")) {
        processNationRule(rule);
      } else if (rule.startsWith("Wanted")) {
        processCriminalRule(rule);
      } else if (rule.contains("vaccination")) {
        processVaccineRule(rule);
      } else {
        processDocumentRule(rule);
      }
    }
  }

  private void processNationRule(String rule) {
    String[] countries = rule.substring(rule.indexOf("of") + 3).split(",");
    List<String> countryNames = Arrays.stream(countries).map(String::trim).collect(Collectors.toList());
    if (rule.startsWith("Allow")) {
      allowedCountries.addAll(countryNames);
    } else {
      countryNames.forEach(allowedCountries::remove);
    }
  }

  private void processCriminalRule(String rule) {
    wantedCriminal = rule.substring(rule.indexOf(":") + 2);
  }

  private void processVaccineRule(String rule) {
    String[] words = rule.split(" ");
    String vaccineName = words[words.length - 2];
    if (rule.startsWith("Entrants") || rule.startsWith("Foreigners")) {
      // General rule
      addGeneralVaccineRule(rule, vaccineName);
    } else {
      // Per country rule
      addPerCountryVaccineRule(rule, vaccineName);
    }
  }

  private void addGeneralVaccineRule(String rule, String vaccineName) {
    // Determine the countries this general rule applies to
    Set<String> countries;
    if (rule.startsWith("Entrants")) {
      countries = COUNTRY_NAMES;
    } else {
      countries = new HashSet<>(COUNTRY_NAMES);
      countries.remove("Arstotzka");
    }

    if (vaccineRules.containsKey(vaccineName)) {
      // Update existing rule
      if (rule.contains("no")) {
        vaccineRules.remove(vaccineName);
      } else {
        vaccineRules.put(vaccineName, COUNTRY_NAMES);
      }
    } else if (!rule.contains("no")) {
      // Add a new rule
      vaccineRules.put(vaccineName, countries);
    }
  }

  private void addPerCountryVaccineRule(String rule, String vaccineName) {
    Set<String> countries = getCountriesForRule(rule);
    if (vaccineRules.containsKey(vaccineName)) {
      // Update existing rule
      vaccineRules.compute(vaccineName, (k, v) -> {
        if (rule.contains("no")) {
          v.removeAll(countries);
        } else {
          v.addAll(countries);
        }

        return v;
      });
    } else if (!rule.contains("no")) {
      // Add a new rule
      vaccineRules.put(vaccineName, countries);
    }
  }

  private Set<String> getCountriesForRule(String rule) {
    return Arrays.stream(rule.split(" ")).filter(COUNTRY_NAMES::contains).collect(Collectors.toSet());
  }

  private void processDocumentRule(String rule) {

  }

  public String inspect(Map<String, String> person) {
    // Your code here
    return "";
  }
}
