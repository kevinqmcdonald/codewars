/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codewars;

public class Car {
  public Body body;
  public Chassis chassis;

  public Car(int length, int doors) throws Exception {
    if (length < 7) throw new Exception("Length must be at least 7");
    if (doors < 1) throw new Exception("Must have at least 1 door");
    if (doors > (length - 5) / 2) throw new Exception("Too many doors for car length");

    body = new Body(length, doors);
    chassis = new Chassis(length);
  }
}

class Body {
  public String component = " ____\n|  []\\\n";

  public Body(int length, int doors) {
    fillTop(length);
    fillMiddle(length);
    addDoors(doors);
  }

  private String getTop() {
    int ixOfNewline = component.indexOf("\n");
    return component.substring(0, ixOfNewline);
  }

  private void setTop(String top) {
    int ixOfNewline = component.indexOf("\n");
    component = top + component.substring(ixOfNewline);
  }

  private String getMiddle() {
    int ixOfNewline = component.indexOf("\n");
    return component.substring(ixOfNewline + 1);
  }

  private void setMiddle(String middle) {
    int ixOfNewline = component.indexOf("\n");
    component = component.substring(0, ixOfNewline + 1) + middle;
  }

  private void fillTop(int length) {
    StringBuilder top = new StringBuilder(getTop());
    while (top.length() < length - 2) {
      top.append("_");
    }

    setTop(top.toString());
  }

  private void fillMiddle(int length) {
    StringBuilder middle = new StringBuilder(getMiddle());
    while (middle.length() <= length - 1) {
      middle.insert(1, " ");
    }

    setMiddle(middle.toString());
  }

  private void addDoors(int doors) {
    String middle = getMiddle();

    boolean addToBack = true;
    for (int i = 0; i < doors - 1; i++) {
      if (addToBack) {
        int ix = middle.indexOf(" ");
        middle = new StringBuilder(middle).replace(ix, ix + 2, "[]").toString();
      } else {
        int ix = middle.lastIndexOf(" ");
        middle = new StringBuilder(middle).replace(ix - 1, ix + 1, "[]").toString();
      }

      addToBack = !addToBack;
    }

    setMiddle(middle);
  }
}

class Chassis {
  public String component = "-o--o-'";

  public Chassis(int length) {
    if (length > 11) addAxles(length);
    fillChassis(length);
  }

  private void addAxles(int length) {
    int numAxlesToAdd = 1 + (length - length % 2 - 12) / 2;
    boolean addToBack = true;
    for (int i = 0; i < numAxlesToAdd; i++) {
      if (addToBack) {
        component = component.replaceFirst("(-o)", "-o-o");
      } else {
        // Reverse, Reverse!
        String reverse = new StringBuilder(component).reverse().toString();
        component = new StringBuilder(reverse.replaceFirst("(-o)", "-o-o")).reverse().toString();
      }

      addToBack = !addToBack;
    }
  }

  private void fillChassis(int length) {
    while (component.length() < length) {
      component = component.substring(0, component.length() / 2) + "-" + component.substring(component.length() / 2);
    }
  }
}
